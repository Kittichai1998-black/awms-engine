{"version":3,"sources":["views/page/Dashboard/MaintenanceCalendar.js"],"names":["Axios","apicall","withStyles","theme","container","height","props","classes","useTranslation","t","useState","dataEvents","setDataEvents","query","queryString","window","apipath","q","f","g","s","sk","l","all","useEffect","get","createQueryString","then","res","data","datas","_dataevents","map","x","backgroundColor","borderColor","textColor","EventStatus","push","id","ID","title","Name","start","moment","MaintenanceDate","format","style","maxHeight","plugins","dayGridPlugin","timeGridPlugin","interactionPlugin","initialView","selectable","events","eventClick","clickInfo","open","event","eventContent","eventInfo","cursor","marginLeft"],"mappings":"6OAUMA,EAAQ,IAAIC,IA+FHC,uBA7FA,SAAAC,GAAK,MAAK,CACrBC,UAAW,CACPC,OAAQ,cA2FDH,EAtFa,SAACI,GAELA,EAAZC,QACMC,cAANC,EADR,IAEA,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACMC,EAAQ,CACVC,YAAaC,OAAOC,QAAU,uBAC9BP,EAAG,oBACHQ,EAAG,uCACHC,EAAG,IACHC,EAAG,GACHC,EAAG,0BACHC,GAAI,GACJC,EAAG,IACHC,IAAK,IAGTC,qBAAU,WACNxB,EAAMyB,IAAIC,YAAkBb,IAAQc,MAAK,SAAAC,GACrC,GAAIA,EAAIC,KAAKC,MAAO,CAChB,IAAIC,EAAc,GAClBH,EAAIC,KAAKC,MAAME,KAAI,SAAAC,GACf,IAAIC,EAAkB,GAClBC,EAAc,GACdC,EAAY,UACM,KAAlBH,EAAEI,aACFH,EAAkB,OAClBC,EAAc,WACW,KAAlBF,EAAEI,aAAwC,KAAlBJ,EAAEI,aACjCH,EAAkB,UAClBC,EAAc,WACY,KAAnBF,EAAEI,aACTH,EAAkB,UAClBC,EAAc,WACW,KAAlBF,EAAEI,cACTH,EAAkB,UAClBC,EAAc,UACdC,EAAY,QAEhBL,EAAYO,KAAZ,aACIC,GAAIN,EAAEO,GACNC,MAAOR,EAAES,KACTC,MAAOC,IAAOX,EAAEY,iBAAiBC,OAAO,cACxCZ,gBAAiBA,EACjBC,YAAaA,EACbC,UAAWA,GACRH,OAGXrB,EAAcmB,QAEdnB,EAAc,SAGvB,IAcH,OACI,kBAAC,IAAD,CACImC,MAAO,CAACC,UAAW1C,EAAMD,QACzB4C,QAAS,CAACC,IAAeC,IAAgBC,KAMzCC,YAAY,eACZC,YAAY,EACZC,OAAQ5C,EACR6C,WAxBiB,SAACC,GACtB1C,OAAO2C,KAAK,0CAA4CD,EAAUE,MAAMpB,KAwBpEqB,aAtBR,SAA4BC,GACxB,OACI,yBAAKd,MAAO,CAAEe,OAAQ,YAElB,uBAAGf,MAAO,CAAEgB,WAAY,QAAUF,EAAUF,MAAMlB","file":"static/js/155.6422b17c.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\nimport { apicall, createQueryString, Clone } from '../../../components/function/CoreFunction';\r\nimport FullCalendar from '@fullcalendar/react'\r\nimport dayGridPlugin from '@fullcalendar/daygrid';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport interactionPlugin from \"@fullcalendar/interaction\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport timeGridPlugin from '@fullcalendar/timegrid'\r\nimport queryString from \"query-string\";\r\nimport moment from \"moment\";\r\nconst Axios = new apicall();\r\n\r\nconst styles = theme => ({\r\n    container: {\r\n        height: 'inherit'\r\n    }\r\n\r\n})\r\n\r\nconst MaintenanceCalendar = (props) => {\r\n\r\n    const { classes } = props;\r\n    const { t } = useTranslation();\r\n    const [dataEvents, setDataEvents] = useState([]);\r\n    const query = {\r\n        queryString: window.apipath + \"/v2/SelectDataTrxAPI\",\r\n        t: \"MaintenanceResult\",\r\n        q: '[{ \"f\": \"Status\", \"c\":\"!=\", \"v\": 2}]',\r\n        f: \"*\",\r\n        g: \"\",\r\n        s: \"[{'f':'ID','od':'asc'}]\",\r\n        sk: \"\",\r\n        l: 100,\r\n        all: \"\",\r\n    };\r\n\r\n    useEffect(() => {\r\n        Axios.get(createQueryString(query)).then(res => {\r\n            if (res.data.datas) {\r\n                let _dataevents = []\r\n                res.data.datas.map(x => {\r\n                    let backgroundColor = \"\";\r\n                    let borderColor = \"\";\r\n                    let textColor = \"#2f353a\";\r\n                    if (x.EventStatus === 10) {\r\n                        backgroundColor = \"#fff\";\r\n                        borderColor = \"#c8ced3\";\r\n                    } else if (x.EventStatus === 11 || x.EventStatus === 12) {\r\n                        backgroundColor = \"#ffc107\";\r\n                        borderColor = \"#ffc107\";\r\n                    } else if (x.EventStatus === (31)) {\r\n                        backgroundColor = \"#f0f3f5\";\r\n                        borderColor = \"#3d6dff\";\r\n                    } else if (x.EventStatus === 32) {\r\n                        backgroundColor = \"#3d6dff\";\r\n                        borderColor = \"#3d6dff\";\r\n                        textColor = '#fff';\r\n                    }\r\n                    _dataevents.push({\r\n                        id: x.ID,\r\n                        title: x.Name,\r\n                        start: moment(x.MaintenanceDate).format(\"YYYY-MM-DD\"),\r\n                        backgroundColor: backgroundColor,\r\n                        borderColor: borderColor,\r\n                        textColor: textColor,\r\n                        ...x\r\n                    });\r\n                });\r\n                setDataEvents(_dataevents)\r\n            } else {\r\n                setDataEvents([])\r\n            }\r\n        });\r\n    }, [])\r\n\r\n    const handleEventClick = (clickInfo) => {\r\n        window.open(\"/warehouse/managemtnplan?maintenanceID=\" + clickInfo.event.id)\r\n    }\r\n    function renderEventContent(eventInfo) {\r\n        return (\r\n            <div style={{ cursor: 'pointer' }}>\r\n                {/* <b>{eventInfo.timeText}</b> */}\r\n                <b style={{ marginLeft: '2px' }}>{eventInfo.event.title}</b>\r\n            </div>\r\n        )\r\n    }\r\n     \r\n    return (\r\n        <FullCalendar\r\n            style={{maxHeight: props.height}}\r\n            plugins={[dayGridPlugin, timeGridPlugin, interactionPlugin]}\r\n            // headerToolbar={{\r\n            //     left: 'prev,next today',\r\n            //     center: 'title',\r\n            //     right: 'dayGridMonth,timeGridWeek' //,timeGridDay\r\n            // }}\r\n            initialView=\"dayGridMonth\"\r\n            selectable={true}\r\n            events={dataEvents}\r\n            eventClick={handleEventClick}\r\n            eventContent={renderEventContent} // custom render function\r\n        />\r\n    );\r\n};\r\n\r\nexport default withStyles(styles)(MaintenanceCalendar);\r\n"],"sourceRoot":""}