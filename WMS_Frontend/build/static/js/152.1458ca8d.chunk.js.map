{"version":3,"sources":["views/pageComponent/MonitorCard.js","../node_modules/colorette/index.js","views/page/Monitor/MonitorTest.js"],"names":["Axios","apicall","FormInline","styled","div","label","withStyles","theme","avatar","backgroundColor","red","paddingTop","paddingLeft","color","white","formControl","minWidth","props","full","useState","pathMonitor","setPathMonitor","date","setDate","data","setData","gridConfigs","setGridConfigs","isFullScreen","setIsFullScreen","classes","width","height","size","setSize","areaData","setAreaData","useLayoutEffect","updateSize","window","innerWidth","innerHeight","addEventListener","removeEventListener","useEffect","document","fullscreenElement","get","createQueryString","AreaMaster","then","res","datas","filter","x","Code","console","log","Timer","start","Date","getTime","newDate1","Moment","format","url","apipath","connection","signalR","withUrl","skipNegotiation","transport","WebSockets","build","signalrStart","on","list","JSON","parse","length","list2","list3","ObjectType","map","BaseCodeID","ID","BaseCode","rows","r","ParentStorageObject_ID","catch","err","setTimeout","onclose","stop","rowCut","i","sliceIt","slice","push","Quantity","Lot","BaseQuantity","setInterval","clearInterval","queryString","t","q","f","g","s","sk","l","all","SetGrid","container","key","y","col","item","style","overflowY","border","className","title","variant","align","idx","Name","SKUMaster_ID","overflow","position","top","left","zIndex","padding","xs","sm","fontWeight","float","marginRight","marginBottom","id","placeholder","fieldDataKey","fieldLabel","labelPattern","ddlMinWidth","defaultValue","returnDefaultValue","onChange","value","dataObject","inputID","onHandleDDLChange","disabled","marginLeft","onClick","exitFullscreen","mozCancelFullScreen","webkitExitFullscreen","msExitFullscreen","documentElement","requestFullscreen","mozRequestFullScreen","webkitRequestFullscreen","msRequestFullscreen","fontSize","enabled","process","platform","stdout","isTTY","TERM","raw","open","close","searchRegex","replaceValue","indexOf","replace","init","RegExp","Object","defineProperty","set","Setpalet","code","name"],"mappings":"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","file":"static/js/152.1458ca8d.chunk.js","sourcesContent":["import React, { useState, useEffect, useLayoutEffect } from \"react\";\r\nimport * as signalR from '@aspnet/signalr';\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport PropTypes from \"prop-types\";\r\nimport { red, green } from \"@material-ui/core/colors\";\r\nimport CardHeader from \"@material-ui/core/CardHeader\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport FullscreenIcon from \"@material-ui/icons/Fullscreen\";\r\nimport Fullscreen from \"react-full-screen\";\r\nimport Moment from \"moment\";\r\nimport styled from 'styled-components';\r\nimport FullscreenExitIcon from \"@material-ui/icons/FullscreenExit\";\r\nimport AmDropdown from '../../components/AmDropdown';\r\nimport { white } from \"colorette\";\r\nimport _ from \"lodash\";\r\nimport {\r\n  apicall,\r\n  createQueryString\r\n} from \"../../components/function/CoreFunction\";\r\nconst Axios = new apicall();\r\n\r\nconst FormInline = styled.div`\r\n\r\ndisplay: flex;\r\nflex-flow: row wrap;\r\nalign-items: center;\r\nlabel {\r\n    margin: 6px 6px 6px 0;\r\n}\r\ninput {\r\n    vertical-align: middle;\r\n}\r\n@media (max-width: 800px) {\r\n    flex-direction: column;\r\n    align-items: stretch;\r\n    \r\n  }\r\n`;\r\nconst LabelH = styled.label`\r\nfont-weight: bold;\r\n`;\r\n\r\nconst Border = styled.div`\r\n  display: inline-block;\r\n  color: #e91e63;\r\n  font-size: 1.5em;\r\n  margin: 1em;\r\n  padding: 1em 1em;\r\n  border: 3px solid #e91e63;\r\n  border-radius: 4px;\r\n  display: block;\r\n`;\r\nconst styles = theme => ({\r\n  avatar: {\r\n    backgroundColor: red[500],\r\n    paddingTop: \"1px\",\r\n    paddingLeft: \"1px\",\r\n  },\r\n  color: {\r\n    backgroundColor: white[400],\r\n  },\r\n  formControl: {\r\n    //margin: theme.spacing(0),\r\n    minWidth: 150,\r\n    // marginBottom: 5,\r\n    // marginTop: 5,\r\n  },\r\n});\r\n\r\n// const useWindowWidth = () => {\r\n//   const [width, setWidth] = useState(window.innerWidth);\r\n//   const [height, setHeight] = useState(window.innerHeight);\r\n//   const handleResize = () => {\r\n//     setWidth(window.innerWidth);\r\n//     setHeight(window.innerHeight);\r\n//   };\r\n//   useEffect(() => {\r\n//     window.addEventListener(\"resize\", handleResize);\r\n\r\n//     return () => {\r\n//       window.removeEventListener(\"resize\", handleResize);\r\n//     };\r\n//   });\r\n\r\n//   return { width, height };\r\n// };\r\n\r\n\r\nconst MasterData = (props) => {\r\n  const [pathMonitor, setPathMonitor] = useState(\"\");\r\n  const [date, setDate] = useState();\r\n  const [data, setData] = useState([]);\r\n  const [gridConfigs, setGridConfigs] = useState([]);\r\n  const [isFullScreen, setIsFullScreen] = useState(false);\r\n  // const { width, height } = useWindowWidth();\r\n  const [store, setStore] = useState(1);\r\n  const { classes } = props;\r\n  const [size, setSize] = useState({ width: 0, height: 0 });\r\n\r\n  const [areaData, setAreaData] = useState([]);\r\n\r\n  const width_height = useWindowSize(isFullScreen);\r\n  function useWindowSize(full) {\r\n\r\n    useLayoutEffect(() => {\r\n      function updateSize() {\r\n        setSize({ width: window.innerWidth, height: window.innerHeight });\r\n      }\r\n      window.addEventListener('resize', updateSize);\r\n      updateSize();\r\n      return () => window.removeEventListener('resize', updateSize)\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n      function updateSize() {\r\n        setSize({ width: window.innerWidth, height: window.innerHeight });\r\n      }\r\n      updateSize();\r\n    }, [full]);\r\n    return size;\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (document.fullscreenElement === null && isFullScreen) {\r\n      setIsFullScreen(false)\r\n    }\r\n  }, [document.fullscreenElement])\r\n\r\n  useEffect(() => {\r\n    Axios.get(createQueryString(AreaMaster)).then(res => {\r\n      setAreaData(res.data.datas.filter(x => x.Code !== \"WH003\" && x.Code !== \"WH005\"))\r\n      console.log(\"res.data.datas>>>\", res.data.datas)\r\n    });\r\n  }, [])\r\n\r\n  function openFullscreen() {\r\n    if (document.documentElement.requestFullscreen) {\r\n      document.documentElement.requestFullscreen();\r\n    } else if (document.documentElement.mozRequestFullScreen) { /* Firefox */\r\n      document.documentElement.mozRequestFullScreen();\r\n    } else if (document.documentElement.webkitRequestFullscreen) { /* Chrome, Safari and Opera */\r\n      document.documentElement.webkitRequestFullscreen();\r\n    } else if (document.documentElement.msRequestFullscreen) { /* IE/Edge */\r\n      document.documentElement.msRequestFullscreen();\r\n    }\r\n  }\r\n\r\n  function closeFullscreen() {\r\n    if (window.exitFullscreen) {\r\n      document.exitFullscreen();\r\n    } else if (document.mozCancelFullScreen) { /* Firefox */\r\n      document.mozCancelFullScreen();\r\n    } else if (document.webkitExitFullscreen) { /* Chrome, Safari and Opera */\r\n      document.webkitExitFullscreen();\r\n    } else if (document.msExitFullscreen) { /* IE/Edge */\r\n      document.msExitFullscreen();\r\n    }\r\n  }\r\n\r\n  const goFull = () => {\r\n    setIsFullScreen(true);\r\n    openFullscreen();\r\n  };\r\n  const goMin = () => {\r\n    setIsFullScreen(false);\r\n    closeFullscreen();\r\n\r\n  };\r\n\r\n  useEffect(() => {\r\n    console.log(\"startWeb soket\")\r\n\r\n    let url = window.apipath + '/dashboard'\r\n    let connection = new signalR.HubConnectionBuilder()\r\n      .withUrl(url, {\r\n        skipNegotiation: true,\r\n        transport: signalR.HttpTransportType.WebSockets\r\n      })\r\n      //.configureLogging(signalR.LogLevel.Information)\r\n      .build();\r\n\r\n    const signalrStart = () => {\r\n\r\n      connection.start()\r\n        .then(() => {\r\n          connection.on(pathMonitor, res => {\r\n            let list = JSON.parse(res);\r\n            console.log(\">>>>>>>\", list.length)\r\n            let list2 = []\r\n            let list3 = []\r\n            if (list.length !== 0) {\r\n              list2 = list[0].data.filter(x => x.ObjectType === 1)\r\n              list3 = list[0].data.filter(x => x.ObjectType === 2)\r\n              list2 = list2.map(x => {\r\n                return {\r\n                  BaseCodeID: x.ID,\r\n                  BaseCode: x.Code,\r\n                  rows: list3.filter(r => x.ID === r.ParentStorageObject_ID)\r\n                }\r\n              })\r\n              setData([...list2]);\r\n            }\r\n\r\n          })\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n          setTimeout(() => signalrStart(), 5000);\r\n        })\r\n    };\r\n    connection.onclose((err) => {\r\n      if (err) {\r\n        signalrStart()\r\n      }\r\n    });\r\n\r\n    signalrStart()\r\n\r\n    return () => {\r\n      connection.stop()\r\n    }\r\n\r\n  }, [pathMonitor])\r\n\r\n  useEffect(() => {\r\n    if (data.length) {\r\n      let rowCut = [];\r\n      for (let i = 0; i < data.length; i += 5) {\r\n        let sliceIt = data.slice(i, i + 5)\r\n        rowCut.push(sliceIt)\r\n      }\r\n      setGridConfigs(rowCut)\r\n    } else {\r\n      setGridConfigs([[\r\n        { BaseCode: \" \", Quantity: \" \", Lot: \"\", BaseQuantity: \" \" },\r\n        { BaseCode: \" \", Quantity: \" \", Lot: \"\", BaseQuantity: \" \" },\r\n        { BaseCode: \" \", Quantity: \" \", Lot: \"\", BaseQuantity: \" \" },\r\n        { BaseCode: \" \", Quantity: \" \", Lot: \"\", BaseQuantity: \" \" },\r\n        { BaseCode: \" \", Quantity: \" \", Lot: \"\", BaseQuantity: \" \" }],\r\n\r\n      [{ BaseCode: \" \", Quantity: \" \", Lot: \"\", BaseQuantity: \" \" },\r\n      { BaseCode: \" \", Quantity: \" \", Lot: \"\", BaseQuantity: \" \" },\r\n      { BaseCode: \" \", Quantity: \" \", Lot: \"\", BaseQuantity: \" \" },\r\n      { BaseCode: \" \", Quantity: \" \", Lot: \"\", BaseQuantity: \" \" },\r\n      { BaseCode: \" \", Quantity: \" \", Lot: \"\", BaseQuantity: \" \" }]\r\n      ]);\r\n    }\r\n  }, [data])\r\n\r\n\r\n  useEffect(() => {\r\n    setInterval(Timer, 1000);\r\n    return () => clearInterval(Timer)\r\n  }, []);\r\n\r\n  function Timer() {\r\n    let start = new Date().getTime();\r\n    let newDate1 = Moment(start).format(\"YYYY/MM/DD h:mm:ss\");\r\n    setDate(newDate1);\r\n  }\r\n\r\n  const HandleChange = (item) => {\r\n    setStore(item.target.value);\r\n    console.log(\"Age :>>>\", store, data);\r\n  };\r\n\r\n  const onHandleDDLChange = (value) => {\r\n    console.log(value)\r\n    if (value === 1) {\r\n      setPathMonitor(\"WareHouse8\");\r\n    } else if (value === 2) {\r\n      // setPathMonitor(\"WareHouse3\");\r\n      // TODO\r\n    }\r\n  };\r\n\r\n  const AreaMaster = {\r\n    queryString: window.apipath + \"/v2/SelectDataMstAPI/\",\r\n    t: \"Warehouse\",\r\n    q: '[{ \"f\": \"Status\", \"c\":\"=\", \"v\": 1}]',\r\n    f: \"*\",\r\n    g: \"\",\r\n    s: \"[{'f':'ID','od':'asc'}]\",\r\n    sk: 0,\r\n    l: 100,\r\n    all: \"\"\r\n  };\r\n\r\n  const SetGrid = () => {\r\n    return gridConfigs.map((x, i) => {\r\n      if (x.length) {\r\n        return (\r\n          <>\r\n            <Grid container key={i}>\r\n              {x.map((y, col) => {\r\n                return (\r\n                  <Grid item key={col}>\r\n                    <Card\r\n                      style={{\r\n                        overflowY: \"auto\",\r\n                        border: \"2px solid powderblue\",\r\n                        paddingLeft: isFullScreen ? \"10px\" : \"10px\",\r\n                        width: isFullScreen ? `${(size.width / 5) - 15}px` : \"200px\",\r\n                        height: isFullScreen ? `${(size.height / 2) - 40}px` : \"200px\",\r\n                      }}\r\n                      className={classes.color}\r\n                    >\r\n                      <CardHeader\r\n                        title={\r\n                          <Typography variant=\"h5\" align=\"center\">\r\n                            {y.BaseCode}\r\n                          </Typography>\r\n                        }\r\n                      />\r\n\r\n                      {y.rows ? y.rows.map((r, idx) => {\r\n                        return <>\r\n\r\n                          <Typography >\r\n                            SKU:{r.Name} {r.SKUMaster_ID}\r\n                          </Typography>\r\n                          <Typography>\r\n                            LOT: {r.Lot ? r.Lot : ''}\r\n                          </Typography>\r\n                          <Typography >\r\n                            count: {r.Quantity ? r.Quantity + \"/\" + r.BaseQuantity : ''}\r\n                          </Typography>\r\n                          <hr style={{ border: \"1px solid red\", }} />\r\n                        </>\r\n                      }) : null}\r\n                    </Card>\r\n                  </Grid>\r\n                );\r\n              })}\r\n            </Grid>\r\n          </>\r\n        );\r\n      }\r\n    });\r\n  };\r\n  return (\r\n    <>\r\n      <div style={isFullScreen ? { overflow: \"hidden\", width: \"100%\", height: \"100%\", position: \"absolute\", top: 0, left: 0, zIndex: 999999 } : {}}>\r\n        {/* <Fullscreen\r\n        enabled={isFullScreen}\r\n        onChange={(isFull) => setIsFullScreen(isFull)}\r\n      > */}\r\n        <div\r\n          style={\r\n            isFullScreen\r\n              ? {\r\n                backgroundColor: \"#e4e7ea\",\r\n                height: \"100%\",\r\n                width: \"100%\",\r\n                padding: \"1em 1.8em 1.8em 2em\",\r\n              }\r\n              : {}\r\n          }\r\n          className=\"fullscreen\"\r\n        >\r\n          <Grid container>\r\n            <Grid item xs={12} sm={6}>\r\n              <h3 style={{ fontWeight: 'bold' }}>{date}</h3>\r\n            </Grid>\r\n            <Grid item xs={12} sm={2}>\r\n              {/* <h3>Warehouse</h3> */}\r\n              {/* <LabelH>{\"คลัง\"} : </LabelH> */}\r\n            </Grid>\r\n            <Grid item xs={12} sm={2}>\r\n\r\n              <FormInline style={{ width: \"200px\", float: \"right\", marginRight: \"50px\", marginBottom: \"20px\" }}>\r\n                <label>Warehouse : </label>\r\n                <AmDropdown\r\n                  id={\"ID\"}\r\n                  placeholder={\"กรุณาเลือกคลังสินค้า\"}\r\n                  fieldDataKey={\"ID\"}\r\n                  fieldLabel={[\"Name\"]}\r\n                  labelPattern=\" : \"\r\n                  width={250}\r\n                  ddlMinWidth={200}\r\n                  //returnDefaultValue={true}\r\n                  defaultValue={1}\r\n                  zIndex={1000}\r\n                  data={areaData}\r\n                  returnDefaultValue={true}\r\n                  onChange={(value, dataObject, inputID, fieldDataKey) => onHandleDDLChange(value)}\r\n                  disabled={isFullScreen}\r\n                />\r\n              </FormInline>\r\n            </Grid>\r\n            <Grid item xs={12} sm={2}>\r\n              <IconButton\r\n                style={{ marginLeft: 100, padding: 0 }}\r\n                onClick={isFullScreen ? goMin : goFull}\r\n              >\r\n                {isFullScreen ? (\r\n                  <FullscreenExitIcon fontSize=\"large\" />\r\n                ) : (\r\n                  <FullscreenIcon fontSize=\"large\" />\r\n                )}\r\n              </IconButton>\r\n            </Grid>\r\n          </Grid>\r\n          <SetGrid />\r\n        </div>\r\n      </div>\r\n      {/* </Fullscreen> */}\r\n    </>\r\n  );\r\n};\r\nexport default withStyles(styles)(MasterData);\r\n","let enabled =\n  !(\"NO_COLOR\" in process.env) &&\n  (\"FORCE_COLOR\" in process.env ||\n    process.platform === \"win32\" ||\n    (process.stdout != null &&\n      process.stdout.isTTY &&\n      process.env.TERM &&\n      process.env.TERM !== \"dumb\"))\n\nconst raw = (open, close, searchRegex, replaceValue) => (s) =>\n  enabled\n    ? open +\n      (~(s += \"\").indexOf(close, 4) // skip opening \\x1b[\n        ? s.replace(searchRegex, replaceValue)\n        : s) +\n      close\n    : s\n\nconst init = (open, close) => {\n  return raw(\n    `\\x1b[${open}m`,\n    `\\x1b[${close}m`,\n    new RegExp(`\\\\x1b\\\\[${close}m`, \"g\"),\n    `\\x1b[${open}m`\n  )\n}\n\nexport const options = Object.defineProperty({}, \"enabled\", {\n  get: () => enabled,\n  set: (value) => (enabled = value),\n})\n\nexport const reset = init(0, 0)\nexport const bold = raw(\"\\x1b[1m\", \"\\x1b[22m\", /\\x1b\\[22m/g, \"\\x1b[22m\\x1b[1m\")\nexport const dim = raw(\"\\x1b[2m\", \"\\x1b[22m\", /\\x1b\\[22m/g, \"\\x1b[22m\\x1b[2m\")\nexport const italic = init(3, 23)\nexport const underline = init(4, 24)\nexport const inverse = init(7, 27)\nexport const hidden = init(8, 28)\nexport const strikethrough = init(9, 29)\nexport const black = init(30, 39)\nexport const red = init(31, 39)\nexport const green = init(32, 39)\nexport const yellow = init(33, 39)\nexport const blue = init(34, 39)\nexport const magenta = init(35, 39)\nexport const cyan = init(36, 39)\nexport const white = init(37, 39)\nexport const gray = init(90, 39)\nexport const bgBlack = init(40, 49)\nexport const bgRed = init(41, 49)\nexport const bgGreen = init(42, 49)\nexport const bgYellow = init(43, 49)\nexport const bgBlue = init(44, 49)\nexport const bgMagenta = init(45, 49)\nexport const bgCyan = init(46, 49)\nexport const bgWhite = init(47, 49)\nexport const blackBright = init(90, 39)\nexport const redBright = init(91, 39)\nexport const greenBright = init(92, 39)\nexport const yellowBright = init(93, 39)\nexport const blueBright = init(94, 39)\nexport const magentaBright = init(95, 39)\nexport const cyanBright = init(96, 39)\nexport const whiteBright = init(97, 39)\nexport const bgBlackBright = init(100, 49)\nexport const bgRedBright = init(101, 49)\nexport const bgGreenBright = init(102, 49)\nexport const bgYellowBright = init(103, 49)\nexport const bgBlueBright = init(104, 49)\nexport const bgMagentaBright = init(105, 49)\nexport const bgCyanBright = init(106, 49)\nexport const bgWhiteBright = init(107, 49)\n","import * as signalR from \"@aspnet/signalr\";\r\n\r\n// import Axios from 'axios'\r\nimport queryString from \"query-string\";\r\n// import Moment from 'moment'\r\nimport React, { useState, useEffect } from \"react\";\r\n// import { useTranslation } from 'react-i18next'\r\n\r\n// import AmPageDashboard from '../../../components/AmPageDashboard';\r\n// import { createQueryString } from '../../../components/function/CoreFunction'\r\n// import { useTranslation } from 'react-i18next'\r\nimport MonitorCard from \"../../pageComponent/MonitorCard\";\r\n// import MonitorCard from '../../views/pageComponent/MonitorCard';\r\nimport Select from \"@material-ui/core/Select\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\n\r\nconst Setpalet = (props) => {\r\n  const [count, setCount] = useState(0);\r\n  const gridConfigs = [\r\n    [\r\n      {\r\n        code: \"G01\",\r\n        name: \"พาเลท1\",\r\n      },\r\n      {\r\n        code: \"G02\",\r\n        name: \"พาเลท2\",\r\n      },\r\n      {\r\n        code: \"G03\",\r\n        name: \"พาเลท3\",\r\n      },\r\n      {\r\n        code: \"G04\",\r\n        name: \"พาเลท4\",\r\n      },\r\n      {\r\n        code: \"G05\",\r\n        name: \"พาเลท5\",\r\n      },\r\n    ],\r\n    [\r\n      {\r\n        code: \"G06\",\r\n        name: \"พาเลท6\",\r\n      },\r\n      {\r\n        code: \"G07\",\r\n        name: \"พาเลท8\",\r\n      },\r\n      {\r\n        code: \"G08\",\r\n        name: \"พาเลท8\",\r\n      },\r\n      {\r\n        code: \"G09\",\r\n        name: \"พาเลท9\",\r\n      },\r\n      {\r\n        code: \"G010\",\r\n        name: \"พาเลท10\",\r\n      },\r\n    ],\r\n  ];\r\n  return (\r\n    <>\r\n      <MonitorCard gridConfigs={gridConfigs} />\r\n    </>\r\n  );\r\n};\r\nexport default Setpalet;\r\n"],"sourceRoot":""}