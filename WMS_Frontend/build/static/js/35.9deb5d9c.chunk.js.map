{"version":3,"sources":["views/page/ENGINE/Monitor/MonitorPicking.js"],"names":["props","dashboard","useEffect","UrlSplit","window","location","pathname","split","document","title","localStorage","getItem","headercol1","accessor","Header","className","width","type","sortable","style","textAlign","useState","table","data","headercol","setData","count","setCount","loading","onLoaded","onLoading","url","apipath","connection","signalR","withUrl","skipNegotiation","transport","WebSockets","build","signalrStart","start","then","on","res","JSON","parse","catch","err","console","log","setTimeout","onclose","stop","time","format","coltable"],"mappings":"iLAWe,mBAAAA,GAEX,IAAIC,EAAY,GAChBC,qBAAU,WAGN,IAAIC,EAAWC,OAAOC,SAASC,SAASC,MAAM,KAAK,GAClC,cAAbJ,IAEAF,EAAY,eACZO,SAASC,MAAQ,4BAKJ,YAAbN,IAEAF,EAAY,gBACZO,SAASC,MAAQ,4BAMtB,CAACT,EAAMK,SAAUK,aAAaC,QAAQ,UAEzC,IAAMC,EAAa,CACf,CAAEC,SAAU,aAAcC,OAAQ,OAAQC,UAAW,SAAUC,MAAO,IAAKC,KAAM,OAAQC,UAAU,EAAOC,MAAO,CAAEC,UAAW,WAE9H,CAAEP,SAAU,WAAYC,OAAQ,WAAYG,KAAM,WAAYD,MAAO,GAAIE,UAAU,EAAOC,MAAO,CAAEC,UAAW,WAC9G,CAAEP,SAAU,UAAWC,OAAQ,YAAaE,MAAO,IAAKE,UAAU,EAAOC,MAAO,CAAEC,UAAW,WAC7F,CAAEP,SAAU,MAAOC,OAAQ,MAAOE,MAAO,IAAKE,UAAU,GACxD,CAAEL,SAAU,aAAcC,OAAQ,SAAUE,MAAO,IAAKE,UAAU,EAAOC,MAAO,CAAEC,UAAW,WAC7F,CAAEP,SAAU,WAAYC,OAAQ,YAAaI,UAAU,GAMvD,CAAEL,SAAU,eAAgBC,OAAQ,UAAWE,MAAO,IAAKE,UAAU,EAAOC,MAAO,CAAEC,UAAW,YAGpG,EAAwBC,mBAAS,CAC7B,CACI,CACIJ,KAAM,KACNK,MAAO,CACH,CACIC,KAAM,GACNC,UAAWZ,QAP/B,mBAAOW,EAAP,KAAaE,EAAb,KAaA,EAA0BJ,mBAAS,GAAnC,mBAAOK,EAAP,KAAcC,EAAd,KACAzB,qBAAU,WACFwB,EAAQ,EACRtB,OAAOwB,QAAQC,WAEfzB,OAAOwB,QAAQE,cAEpB,CAACJ,IACJxB,qBAAU,WAEN,IAAI6B,EAAM3B,OAAO4B,QAAU,aACvBC,GAAa,IAAIC,KAChBC,QAAQJ,EAAK,CACVK,iBAAiB,EACjBC,UAAWH,IAA0BI,aAGxCC,QAECC,EAAe,SAAfA,IACFP,EAAWQ,QACNC,MAAK,WACFT,EAAWU,GAAG1C,GAAW,SAAA2C,GAErBjB,EAASD,EAAQ,GACjBH,EAAK,GAAG,GAAGD,MAAM,GAAGE,UAAYZ,EAChCW,EAAK,GAAG,GAAGD,MAAM,GAAGC,KAAOsB,KAAKC,MAAMF,GACtCnB,EAAQ,YAAIF,UAGnBwB,OAAM,SAACC,GACJC,QAAQC,IAAIF,GACZG,YAAW,kBAAMX,MAAgB,SAa7C,OATAP,EAAWmB,SAAQ,SAACJ,GAEZA,GACAR,OAIRA,IAEO,WACHP,EAAWoB,UAGhB,CAAC3C,aAAaC,QAAQ,UAEzBT,qBAAU,WACNqB,EAAK,GAAG,GAAGD,MAAM,GAAGE,UAAYZ,EAChCW,EAAK,GAAG,GAAGD,MAAM,GAAGC,KAAOA,EAAK,GAAG,GAAGD,MAAM,GAAGC,KAAOA,EAAK,GAAG,GAAGD,MAAM,GAAGC,KAAO,GACjFE,EAAQ,YAAIF,MACb,CAACb,aAAaC,QAAQ,UAOzB,OACI,kBAAC,IAAD,CACI2C,KAPK,CACTC,OAAQ,uBAQJC,SAAUjC","file":"static/js/35.9deb5d9c.chunk.js","sourcesContent":["import * as signalR from '@aspnet/signalr';\r\n\r\n// import Axios from 'axios'\r\nimport queryString from 'query-string'\r\n// import Moment from 'moment'\r\nimport React, { useState, useEffect } from 'react'\r\n// import { useTranslation } from 'react-i18next'\r\n\r\nimport AmPageDashboard from '../../../../components/AmPageDashboard';\r\n// import { createQueryString } from '../../../components/function/CoreFunction'\r\n\r\nexport default props => {\r\n    // const { t } = useTranslation()\r\n    let dashboard = \"\";\r\n    useEffect(() => {\r\n        // var location = window.location;\r\n        // const search = queryString.parse(location.search)\r\n        let UrlSplit = window.location.pathname.split('/')[2]\r\n        if (UrlSplit === \"receiving\") {\r\n            // if (location.pathname === \"/monitor/inbound\") {\r\n            dashboard = 'DASHBOARD_IN';\r\n            document.title = \"receiving Progress : AMW\";\r\n            // } else {\r\n            //     window.location.replace(\"/404\");\r\n            // }\r\n        }\r\n        if (UrlSplit === \"issuing\") {\r\n            // if (location.pathname === \"/monitor/outbound\") {\r\n            dashboard = 'DASHBOARD_OUT';\r\n            document.title = \"issuing Progress : AMW\";\r\n            // } else {\r\n            //     window.location.replace(\"/404\");\r\n            // }\r\n        }\r\n\r\n    }, [props.location, localStorage.getItem('Lang')]);\r\n\r\n    const headercol1 = [\r\n        { accessor: \"ActualTime\", Header: \"Time\", className: 'center', width: 100, type: \"time\", sortable: false, style: { textAlign: \"center\" } },\r\n        // { accessor: \"Cur_AreaLocation_Code\", Header: \"Gate\", width: 60, sortable: false, style: { textAlign: \"center\" } },\r\n        { accessor: \"Priority\", Header: \"Priority\", type: \"priority\", width: 80, sortable: false, style: { textAlign: \"center\" } },\r\n        { accessor: \"OrderNo\", Header: \"Order No.\", width: 100, sortable: false, style: { textAlign: \"center\" } },\r\n        { accessor: \"Qty\", Header: \"Qty\", width: 100, sortable: false },\r\n        { accessor: \"PalletCode\", Header: \"Pallet\", width: 140, sortable: false, style: { textAlign: \"center\" } },\r\n        { accessor: \"PackName\", Header: \"Item Code\", sortable: false },\r\n        // { accessor: \"Sou_Area\", Header: \"Source\", width: 100, sortable: false },\r\n        // { accessor: \"Cur_Area\", Header: \"Current\", width: 170, sortable: false },\r\n        // { accessor: \"Des_Area\", Header: \"Destination\", width: 160, sortable: false },\r\n\r\n\r\n        { accessor: \"DocumentCode\", Header: \"Doc No.\", width: 160, sortable: false, style: { textAlign: \"center\" } },\r\n    ]\r\n\r\n    const [data, setData] = useState([\r\n        [ //row\r\n            { //col \r\n                type: null,\r\n                table: [\r\n                    { //table in col\r\n                        data: [],\r\n                        headercol: headercol1\r\n                    }\r\n                ]\r\n            }\r\n        ]\r\n    ])\r\n    const [count, setCount] = useState(0);\r\n    useEffect(() => {\r\n        if (count > 0) {\r\n            window.loading.onLoaded();\r\n        } else {\r\n            window.loading.onLoading();\r\n        }\r\n    }, [count])\r\n    useEffect(() => {\r\n        // console.log(dashboard)\r\n        let url = window.apipath + '/dashboard'\r\n        let connection = new signalR.HubConnectionBuilder()\r\n            .withUrl(url, {\r\n                skipNegotiation: true,\r\n                transport: signalR.HttpTransportType.WebSockets\r\n            })\r\n            //.configureLogging(signalR.LogLevel.Information)\r\n            .build();\r\n\r\n        const signalrStart = () => {\r\n            connection.start()\r\n                .then(() => {\r\n                    connection.on(dashboard, res => {\r\n                        // console.log(JSON.parse(res));\r\n                        setCount(count + 1);\r\n                        data[0][0].table[0].headercol = headercol1\r\n                        data[0][0].table[0].data = JSON.parse(res)\r\n                        setData([...data])\r\n                    })\r\n                })\r\n                .catch((err) => {\r\n                    console.log(err);\r\n                    setTimeout(() => signalrStart(), 5000);\r\n                })\r\n        };\r\n\r\n        connection.onclose((err) => {\r\n\r\n            if (err) {\r\n                signalrStart()\r\n            }\r\n        });\r\n\r\n        signalrStart()\r\n\r\n        return () => {\r\n            connection.stop()\r\n        }\r\n\r\n    }, [localStorage.getItem('Lang')])\r\n\r\n    useEffect(() => {\r\n        data[0][0].table[0].headercol = headercol1\r\n        data[0][0].table[0].data = data[0][0].table[0].data ? data[0][0].table[0].data : []\r\n        setData([...data])\r\n    }, [localStorage.getItem('Lang')])\r\n\r\n    const time = {\r\n        format: \"DD/MM/YYYY HH:mm:ss\", //formet in moment\r\n        // label: \"Date/Time\"\r\n    }\r\n\r\n    return (\r\n        <AmPageDashboard\r\n            time={time}\r\n            // dropdown={dropdown}\r\n            coltable={data}\r\n        />\r\n    )\r\n}\r\n"],"sourceRoot":""}